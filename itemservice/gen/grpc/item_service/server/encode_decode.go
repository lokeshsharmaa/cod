// Code generated by goa v3.11.3, DO NOT EDIT.
//
// ItemService gRPC server encoders and decoders
//
// Command:
// $ goa gen assignment_crossnokaye/cod/itemservice/design

package server

import (
	item_servicepb "assignment_crossnokaye/cod/itemservice/gen/grpc/item_service/pb"
	itemservice "assignment_crossnokaye/cod/itemservice/gen/item_service"
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeCreateResponse encodes responses from the "ItemService" service
// "Create" endpoint.
func EncodeCreateResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(int)
	if !ok {
		return nil, goagrpc.ErrInvalidType("ItemService", "Create", "int", v)
	}
	resp := NewProtoCreateResponse(result)
	return resp, nil
}

// DecodeCreateRequest decodes requests sent to "ItemService" service "Create"
// endpoint.
func DecodeCreateRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *item_servicepb.CreateRequest
		ok      bool
	)
	{
		if message, ok = v.(*item_servicepb.CreateRequest); !ok {
			return nil, goagrpc.ErrInvalidType("ItemService", "Create", "*item_servicepb.CreateRequest", v)
		}
	}
	var payload *itemservice.CreatePayload
	{
		payload = NewCreatePayload(message)
	}
	return payload, nil
}

// EncodeGetResponse encodes responses from the "ItemService" service "Get"
// endpoint.
func EncodeGetResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*itemservice.Item)
	if !ok {
		return nil, goagrpc.ErrInvalidType("ItemService", "Get", "*itemservice.Item", v)
	}
	resp := NewProtoGetResponse(result)
	return resp, nil
}

// DecodeGetRequest decodes requests sent to "ItemService" service "Get"
// endpoint.
func DecodeGetRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *item_servicepb.GetRequest
		ok      bool
	)
	{
		if message, ok = v.(*item_servicepb.GetRequest); !ok {
			return nil, goagrpc.ErrInvalidType("ItemService", "Get", "*item_servicepb.GetRequest", v)
		}
	}
	var payload *itemservice.GetPayload
	{
		payload = NewGetPayload(message)
	}
	return payload, nil
}

// EncodeUpdateResponse encodes responses from the "ItemService" service
// "Update" endpoint.
func EncodeUpdateResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	resp := NewProtoUpdateResponse()
	return resp, nil
}

// DecodeUpdateRequest decodes requests sent to "ItemService" service "Update"
// endpoint.
func DecodeUpdateRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *item_servicepb.UpdateRequest
		ok      bool
	)
	{
		if message, ok = v.(*item_servicepb.UpdateRequest); !ok {
			return nil, goagrpc.ErrInvalidType("ItemService", "Update", "*item_servicepb.UpdateRequest", v)
		}
	}
	var payload *itemservice.UpdatePayload
	{
		payload = NewUpdatePayload(message)
	}
	return payload, nil
}

// EncodeDeleteResponse encodes responses from the "ItemService" service
// "Delete" endpoint.
func EncodeDeleteResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	resp := NewProtoDeleteResponse()
	return resp, nil
}

// DecodeDeleteRequest decodes requests sent to "ItemService" service "Delete"
// endpoint.
func DecodeDeleteRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *item_servicepb.DeleteRequest
		ok      bool
	)
	{
		if message, ok = v.(*item_servicepb.DeleteRequest); !ok {
			return nil, goagrpc.ErrInvalidType("ItemService", "Delete", "*item_servicepb.DeleteRequest", v)
		}
	}
	var payload *itemservice.DeletePayload
	{
		payload = NewDeletePayload(message)
	}
	return payload, nil
}
