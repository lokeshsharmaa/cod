// Code generated by goa v3.11.3, DO NOT EDIT.
//
// ItemService service
//
// Command:
// $ goa gen assignment_crossnokaye/cod/itemservice/design

package itemservice

import (
	"context"
)

// The ItemService service handles CRUD operations for items
type Service interface {
	// Create a new item
	Create(context.Context, *CreatePayload) (res int, err error)
	// Retrieve an item by ID
	Get(context.Context, *GetPayload) (res *Item, err error)
	// Update an item
	Update(context.Context, *UpdatePayload) (err error)
	// Delete an item by ID
	Delete(context.Context, *DeletePayload) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "ItemService"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"Create", "Get", "Update", "Delete"}

// CreatePayload is the payload type of the ItemService service Create method.
type CreatePayload struct {
	// Item name
	Name string
	// Item description
	Description *string
	// Item damage
	Damage int
	// Item healing
	Healing *int
	// Item protection
	Protection *int
}

// DeletePayload is the payload type of the ItemService service Delete method.
type DeletePayload struct {
	// Item ID
	ID int
}

// GetPayload is the payload type of the ItemService service Get method.
type GetPayload struct {
	// Item ID
	ID int
}

// item
type Item struct {
	// Item ID
	ID *int
	// Item name
	Name *string
	// Item description
	Description *string
	// Item damage
	Damage *int
	// Item healing
	Healing *int
	// Item protection
	Protection *int
}

// UpdatePayload is the payload type of the ItemService service Update method.
type UpdatePayload struct {
	// Item ID
	ID int
	// Item name
	Name *string
	// Item description
	Description *string
	// Item damage
	Damage *int
	// Item healing
	Healing *int
	// Item protection
	Protection *int
}

// Item not found
type NotFound string

// Name not unique
type UniqueConstraint string

// Error returns an error description.
func (e NotFound) Error() string {
	return "Item not found"
}

// ErrorName returns "not_found".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e NotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "not_found".
func (e NotFound) GoaErrorName() string {
	return "not_found"
}

// Error returns an error description.
func (e UniqueConstraint) Error() string {
	return "Name not unique"
}

// ErrorName returns "unique_constraint".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e UniqueConstraint) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "unique_constraint".
func (e UniqueConstraint) GoaErrorName() string {
	return "unique_constraint"
}
