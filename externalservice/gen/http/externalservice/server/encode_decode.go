// Code generated by goa v3.11.3, DO NOT EDIT.
//
// externalservice HTTP server encoders and decoders
//
// Command:
// $ goa gen assignment_crossnokaye/cod/externalservice/design

package server

import (
	externalservice "assignment_crossnokaye/cod/externalservice/gen/externalservice"
	"context"
	"io"
	"net/http"
	"strconv"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeCreateCharacterResponse returns an encoder for responses returned by
// the externalservice create_character endpoint.
func EncodeCreateCharacterResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*externalservice.Character)
		enc := encoder(ctx, w)
		body := NewCreateCharacterResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateCharacterRequest returns a decoder for requests sent to the
// externalservice create_character endpoint.
func DecodeCreateCharacterRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateCharacterRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateCharacterRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateCharacterPayload(&body)

		return payload, nil
	}
}

// EncodeGetCharacterResponse returns an encoder for responses returned by the
// externalservice get_character endpoint.
func EncodeGetCharacterResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*externalservice.Character)
		enc := encoder(ctx, w)
		body := NewGetCharacterResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetCharacterRequest returns a decoder for requests sent to the
// externalservice get_character endpoint.
func DecodeGetCharacterRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			id  int
			err error

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseInt(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "integer"))
			}
			id = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetCharacterPayload(id)

		return payload, nil
	}
}

// EncodeUpdateCharacterResponse returns an encoder for responses returned by
// the externalservice update_character endpoint.
func EncodeUpdateCharacterResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeUpdateCharacterRequest returns a decoder for requests sent to the
// externalservice update_character endpoint.
func DecodeUpdateCharacterRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpdateCharacterRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}

		var (
			id int

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseInt(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "integer"))
			}
			id = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewUpdateCharacterPayload(&body, id)

		return payload, nil
	}
}

// EncodeDeleteCharacterResponse returns an encoder for responses returned by
// the externalservice delete_character endpoint.
func EncodeDeleteCharacterResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeDeleteCharacterRequest returns a decoder for requests sent to the
// externalservice delete_character endpoint.
func DecodeDeleteCharacterRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			id  int
			err error

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseInt(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "integer"))
			}
			id = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeleteCharacterPayload(id)

		return payload, nil
	}
}

// EncodeGetInventoryResponse returns an encoder for responses returned by the
// externalservice get_inventory endpoint.
func EncodeGetInventoryResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*externalservice.Inventory)
		enc := encoder(ctx, w)
		body := NewGetInventoryResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetInventoryRequest returns a decoder for requests sent to the
// externalservice get_inventory endpoint.
func DecodeGetInventoryRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			characterID int
			err         error

			params = mux.Vars(r)
		)
		{
			characterIDRaw := params["character_id"]
			v, err2 := strconv.ParseInt(characterIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("characterID", characterIDRaw, "integer"))
			}
			characterID = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetInventoryPayload(characterID)

		return payload, nil
	}
}

// EncodeAddItemToInventoryResponse returns an encoder for responses returned
// by the externalservice add_item_to_inventory endpoint.
func EncodeAddItemToInventoryResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeAddItemToInventoryRequest returns a decoder for requests sent to the
// externalservice add_item_to_inventory endpoint.
func DecodeAddItemToInventoryRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body AddItemToInventoryRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateAddItemToInventoryRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			characterID int

			params = mux.Vars(r)
		)
		{
			characterIDRaw := params["character_id"]
			v, err2 := strconv.ParseInt(characterIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("characterID", characterIDRaw, "integer"))
			}
			characterID = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewAddItemToInventoryPayload(&body, characterID)

		return payload, nil
	}
}

// EncodeRemoveItemFromInventoryResponse returns an encoder for responses
// returned by the externalservice remove_item_from_inventory endpoint.
func EncodeRemoveItemFromInventoryResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeRemoveItemFromInventoryRequest returns a decoder for requests sent to
// the externalservice remove_item_from_inventory endpoint.
func DecodeRemoveItemFromInventoryRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			characterID int
			itemID      int
			err         error

			params = mux.Vars(r)
		)
		{
			characterIDRaw := params["character_id"]
			v, err2 := strconv.ParseInt(characterIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("characterID", characterIDRaw, "integer"))
			}
			characterID = int(v)
		}
		{
			itemIDRaw := params["item_id"]
			v, err2 := strconv.ParseInt(itemIDRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("itemID", itemIDRaw, "integer"))
			}
			itemID = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewRemoveItemFromInventoryPayload(characterID, itemID)

		return payload, nil
	}
}

// EncodeCreateItemResponse returns an encoder for responses returned by the
// externalservice create_item endpoint.
func EncodeCreateItemResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*externalservice.Item)
		enc := encoder(ctx, w)
		body := NewCreateItemResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateItemRequest returns a decoder for requests sent to the
// externalservice create_item endpoint.
func DecodeCreateItemRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateItemRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateItemRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateItemPayload(&body)

		return payload, nil
	}
}

// EncodeGetItemResponse returns an encoder for responses returned by the
// externalservice get_item endpoint.
func EncodeGetItemResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*externalservice.Item)
		enc := encoder(ctx, w)
		body := NewGetItemResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetItemRequest returns a decoder for requests sent to the
// externalservice get_item endpoint.
func DecodeGetItemRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			id  int
			err error

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseInt(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "integer"))
			}
			id = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetItemPayload(id)

		return payload, nil
	}
}

// EncodeUpdateItemResponse returns an encoder for responses returned by the
// externalservice update_item endpoint.
func EncodeUpdateItemResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeUpdateItemRequest returns a decoder for requests sent to the
// externalservice update_item endpoint.
func DecodeUpdateItemRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body UpdateItemRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}

		var (
			id int

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseInt(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "integer"))
			}
			id = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewUpdateItemPayload(&body, id)

		return payload, nil
	}
}

// EncodeDeleteItemResponse returns an encoder for responses returned by the
// externalservice delete_item endpoint.
func EncodeDeleteItemResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		w.WriteHeader(http.StatusOK)
		return nil
	}
}

// DecodeDeleteItemRequest returns a decoder for requests sent to the
// externalservice delete_item endpoint.
func DecodeDeleteItemRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			id  int
			err error

			params = mux.Vars(r)
		)
		{
			idRaw := params["id"]
			v, err2 := strconv.ParseInt(idRaw, 10, strconv.IntSize)
			if err2 != nil {
				err = goa.MergeErrors(err, goa.InvalidFieldTypeError("id", idRaw, "integer"))
			}
			id = int(v)
		}
		if err != nil {
			return nil, err
		}
		payload := NewDeleteItemPayload(id)

		return payload, nil
	}
}
