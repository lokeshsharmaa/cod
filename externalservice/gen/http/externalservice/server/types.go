// Code generated by goa v3.11.3, DO NOT EDIT.
//
// externalservice HTTP server types
//
// Command:
// $ goa gen assignment_crossnokaye/cod/externalservice/design

package server

import (
	externalservice "assignment_crossnokaye/cod/externalservice/gen/externalservice"

	goa "goa.design/goa/v3/pkg"
)

// CreateCharacterRequestBody is the type of the "externalservice" service
// "create_character" endpoint HTTP request body.
type CreateCharacterRequestBody struct {
	// Character name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Character description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Character health
	Health *int `form:"health,omitempty" json:"health,omitempty" xml:"health,omitempty"`
	// Character experience
	Experience *int `form:"experience,omitempty" json:"experience,omitempty" xml:"experience,omitempty"`
}

// UpdateCharacterRequestBody is the type of the "externalservice" service
// "update_character" endpoint HTTP request body.
type UpdateCharacterRequestBody struct {
	// Character name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Character description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Character health
	Health *int `form:"health,omitempty" json:"health,omitempty" xml:"health,omitempty"`
	// Character experience
	Experience *int `form:"experience,omitempty" json:"experience,omitempty" xml:"experience,omitempty"`
}

// CreateCharacterResponseBody is the type of the "externalservice" service
// "create_character" endpoint HTTP response body.
type CreateCharacterResponseBody struct {
	// Character ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Character name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Character description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Character health
	Health *int `form:"health,omitempty" json:"health,omitempty" xml:"health,omitempty"`
	// Character experience
	Experience *int `form:"experience,omitempty" json:"experience,omitempty" xml:"experience,omitempty"`
}

// GetCharacterResponseBody is the type of the "externalservice" service
// "get_character" endpoint HTTP response body.
type GetCharacterResponseBody struct {
	// Character ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Character name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Character description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Character health
	Health *int `form:"health,omitempty" json:"health,omitempty" xml:"health,omitempty"`
	// Character experience
	Experience *int `form:"experience,omitempty" json:"experience,omitempty" xml:"experience,omitempty"`
}

// NewCreateCharacterResponseBody builds the HTTP response body from the result
// of the "create_character" endpoint of the "externalservice" service.
func NewCreateCharacterResponseBody(res *externalservice.Character) *CreateCharacterResponseBody {
	body := &CreateCharacterResponseBody{
		ID:          res.ID,
		Name:        res.Name,
		Description: res.Description,
		Health:      res.Health,
		Experience:  res.Experience,
	}
	return body
}

// NewGetCharacterResponseBody builds the HTTP response body from the result of
// the "get_character" endpoint of the "externalservice" service.
func NewGetCharacterResponseBody(res *externalservice.Character) *GetCharacterResponseBody {
	body := &GetCharacterResponseBody{
		ID:          res.ID,
		Name:        res.Name,
		Description: res.Description,
		Health:      res.Health,
		Experience:  res.Experience,
	}
	return body
}

// NewCreateCharacterPayload builds a externalservice service create_character
// endpoint payload.
func NewCreateCharacterPayload(body *CreateCharacterRequestBody) *externalservice.CreateCharacterPayload {
	v := &externalservice.CreateCharacterPayload{
		Name:        *body.Name,
		Description: body.Description,
		Health:      *body.Health,
		Experience:  *body.Experience,
	}

	return v
}

// NewGetCharacterPayload builds a externalservice service get_character
// endpoint payload.
func NewGetCharacterPayload(id int) *externalservice.GetCharacterPayload {
	v := &externalservice.GetCharacterPayload{}
	v.ID = id

	return v
}

// NewUpdateCharacterPayload builds a externalservice service update_character
// endpoint payload.
func NewUpdateCharacterPayload(body *UpdateCharacterRequestBody, id int) *externalservice.UpdateCharacterPayload {
	v := &externalservice.UpdateCharacterPayload{
		Name:        body.Name,
		Description: body.Description,
		Health:      body.Health,
		Experience:  body.Experience,
	}
	v.ID = id

	return v
}

// NewDeleteCharacterPayload builds a externalservice service delete_character
// endpoint payload.
func NewDeleteCharacterPayload(id int) *externalservice.DeleteCharacterPayload {
	v := &externalservice.DeleteCharacterPayload{}
	v.ID = id

	return v
}

// ValidateCreateCharacterRequestBody runs the validations defined on
// create_character_request_body
func ValidateCreateCharacterRequestBody(body *CreateCharacterRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Health == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("health", "body"))
	}
	if body.Experience == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("experience", "body"))
	}
	return
}
