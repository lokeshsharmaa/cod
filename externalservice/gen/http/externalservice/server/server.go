// Code generated by goa v3.11.3, DO NOT EDIT.
//
// externalservice HTTP server
//
// Command:
// $ goa gen assignment_crossnokaye/cod/externalservice/design

package server

import (
	externalservice "assignment_crossnokaye/cod/externalservice/gen/externalservice"
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the externalservice service endpoint HTTP handlers.
type Server struct {
	Mounts                  []*MountPoint
	CreateCharacter         http.Handler
	GetCharacter            http.Handler
	UpdateCharacter         http.Handler
	DeleteCharacter         http.Handler
	GetInventory            http.Handler
	AddItemToInventory      http.Handler
	RemoveItemFromInventory http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the externalservice service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *externalservice.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"CreateCharacter", "POST", "/characters"},
			{"GetCharacter", "GET", "/characters/{id}"},
			{"UpdateCharacter", "PUT", "/characters/{id}"},
			{"DeleteCharacter", "DELETE", "/characters/{id}"},
			{"GetInventory", "GET", "/characters/{character_id}/inventory"},
			{"AddItemToInventory", "POST", "/characters/{character_id}/inventory/items"},
			{"RemoveItemFromInventory", "DELETE", "/characters/{character_id}/inventory/items/{item_id}"},
		},
		CreateCharacter:         NewCreateCharacterHandler(e.CreateCharacter, mux, decoder, encoder, errhandler, formatter),
		GetCharacter:            NewGetCharacterHandler(e.GetCharacter, mux, decoder, encoder, errhandler, formatter),
		UpdateCharacter:         NewUpdateCharacterHandler(e.UpdateCharacter, mux, decoder, encoder, errhandler, formatter),
		DeleteCharacter:         NewDeleteCharacterHandler(e.DeleteCharacter, mux, decoder, encoder, errhandler, formatter),
		GetInventory:            NewGetInventoryHandler(e.GetInventory, mux, decoder, encoder, errhandler, formatter),
		AddItemToInventory:      NewAddItemToInventoryHandler(e.AddItemToInventory, mux, decoder, encoder, errhandler, formatter),
		RemoveItemFromInventory: NewRemoveItemFromInventoryHandler(e.RemoveItemFromInventory, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "externalservice" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.CreateCharacter = m(s.CreateCharacter)
	s.GetCharacter = m(s.GetCharacter)
	s.UpdateCharacter = m(s.UpdateCharacter)
	s.DeleteCharacter = m(s.DeleteCharacter)
	s.GetInventory = m(s.GetInventory)
	s.AddItemToInventory = m(s.AddItemToInventory)
	s.RemoveItemFromInventory = m(s.RemoveItemFromInventory)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return externalservice.MethodNames[:] }

// Mount configures the mux to serve the externalservice endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountCreateCharacterHandler(mux, h.CreateCharacter)
	MountGetCharacterHandler(mux, h.GetCharacter)
	MountUpdateCharacterHandler(mux, h.UpdateCharacter)
	MountDeleteCharacterHandler(mux, h.DeleteCharacter)
	MountGetInventoryHandler(mux, h.GetInventory)
	MountAddItemToInventoryHandler(mux, h.AddItemToInventory)
	MountRemoveItemFromInventoryHandler(mux, h.RemoveItemFromInventory)
}

// Mount configures the mux to serve the externalservice endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountCreateCharacterHandler configures the mux to serve the
// "externalservice" service "create_character" endpoint.
func MountCreateCharacterHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/characters", f)
}

// NewCreateCharacterHandler creates a HTTP handler which loads the HTTP
// request and calls the "externalservice" service "create_character" endpoint.
func NewCreateCharacterHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateCharacterRequest(mux, decoder)
		encodeResponse = EncodeCreateCharacterResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "create_character")
		ctx = context.WithValue(ctx, goa.ServiceKey, "externalservice")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetCharacterHandler configures the mux to serve the "externalservice"
// service "get_character" endpoint.
func MountGetCharacterHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/characters/{id}", f)
}

// NewGetCharacterHandler creates a HTTP handler which loads the HTTP request
// and calls the "externalservice" service "get_character" endpoint.
func NewGetCharacterHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetCharacterRequest(mux, decoder)
		encodeResponse = EncodeGetCharacterResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get_character")
		ctx = context.WithValue(ctx, goa.ServiceKey, "externalservice")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateCharacterHandler configures the mux to serve the
// "externalservice" service "update_character" endpoint.
func MountUpdateCharacterHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/characters/{id}", f)
}

// NewUpdateCharacterHandler creates a HTTP handler which loads the HTTP
// request and calls the "externalservice" service "update_character" endpoint.
func NewUpdateCharacterHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateCharacterRequest(mux, decoder)
		encodeResponse = EncodeUpdateCharacterResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "update_character")
		ctx = context.WithValue(ctx, goa.ServiceKey, "externalservice")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteCharacterHandler configures the mux to serve the
// "externalservice" service "delete_character" endpoint.
func MountDeleteCharacterHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/characters/{id}", f)
}

// NewDeleteCharacterHandler creates a HTTP handler which loads the HTTP
// request and calls the "externalservice" service "delete_character" endpoint.
func NewDeleteCharacterHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteCharacterRequest(mux, decoder)
		encodeResponse = EncodeDeleteCharacterResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "delete_character")
		ctx = context.WithValue(ctx, goa.ServiceKey, "externalservice")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetInventoryHandler configures the mux to serve the "externalservice"
// service "get_inventory" endpoint.
func MountGetInventoryHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/characters/{character_id}/inventory", f)
}

// NewGetInventoryHandler creates a HTTP handler which loads the HTTP request
// and calls the "externalservice" service "get_inventory" endpoint.
func NewGetInventoryHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetInventoryRequest(mux, decoder)
		encodeResponse = EncodeGetInventoryResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "get_inventory")
		ctx = context.WithValue(ctx, goa.ServiceKey, "externalservice")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountAddItemToInventoryHandler configures the mux to serve the
// "externalservice" service "add_item_to_inventory" endpoint.
func MountAddItemToInventoryHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/characters/{character_id}/inventory/items", f)
}

// NewAddItemToInventoryHandler creates a HTTP handler which loads the HTTP
// request and calls the "externalservice" service "add_item_to_inventory"
// endpoint.
func NewAddItemToInventoryHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeAddItemToInventoryRequest(mux, decoder)
		encodeResponse = EncodeAddItemToInventoryResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "add_item_to_inventory")
		ctx = context.WithValue(ctx, goa.ServiceKey, "externalservice")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountRemoveItemFromInventoryHandler configures the mux to serve the
// "externalservice" service "remove_item_from_inventory" endpoint.
func MountRemoveItemFromInventoryHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/characters/{character_id}/inventory/items/{item_id}", f)
}

// NewRemoveItemFromInventoryHandler creates a HTTP handler which loads the
// HTTP request and calls the "externalservice" service
// "remove_item_from_inventory" endpoint.
func NewRemoveItemFromInventoryHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeRemoveItemFromInventoryRequest(mux, decoder)
		encodeResponse = EncodeRemoveItemFromInventoryResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "remove_item_from_inventory")
		ctx = context.WithValue(ctx, goa.ServiceKey, "externalservice")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
