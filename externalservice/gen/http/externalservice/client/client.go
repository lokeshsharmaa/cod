// Code generated by goa v3.11.3, DO NOT EDIT.
//
// externalservice client HTTP transport
//
// Command:
// $ goa gen assignment_crossnokaye/cod/externalservice/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the externalservice service endpoint HTTP clients.
type Client struct {
	// CreateCharacter Doer is the HTTP client used to make requests to the
	// create_character endpoint.
	CreateCharacterDoer goahttp.Doer

	// GetCharacter Doer is the HTTP client used to make requests to the
	// get_character endpoint.
	GetCharacterDoer goahttp.Doer

	// UpdateCharacter Doer is the HTTP client used to make requests to the
	// update_character endpoint.
	UpdateCharacterDoer goahttp.Doer

	// DeleteCharacter Doer is the HTTP client used to make requests to the
	// delete_character endpoint.
	DeleteCharacterDoer goahttp.Doer

	// GetInventory Doer is the HTTP client used to make requests to the
	// get_inventory endpoint.
	GetInventoryDoer goahttp.Doer

	// AddItemToInventory Doer is the HTTP client used to make requests to the
	// add_item_to_inventory endpoint.
	AddItemToInventoryDoer goahttp.Doer

	// RemoveItemFromInventory Doer is the HTTP client used to make requests to the
	// remove_item_from_inventory endpoint.
	RemoveItemFromInventoryDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the externalservice service
// servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		CreateCharacterDoer:         doer,
		GetCharacterDoer:            doer,
		UpdateCharacterDoer:         doer,
		DeleteCharacterDoer:         doer,
		GetInventoryDoer:            doer,
		AddItemToInventoryDoer:      doer,
		RemoveItemFromInventoryDoer: doer,
		RestoreResponseBody:         restoreBody,
		scheme:                      scheme,
		host:                        host,
		decoder:                     dec,
		encoder:                     enc,
	}
}

// CreateCharacter returns an endpoint that makes HTTP requests to the
// externalservice service create_character server.
func (c *Client) CreateCharacter() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateCharacterRequest(c.encoder)
		decodeResponse = DecodeCreateCharacterResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildCreateCharacterRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateCharacterDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("externalservice", "create_character", err)
		}
		return decodeResponse(resp)
	}
}

// GetCharacter returns an endpoint that makes HTTP requests to the
// externalservice service get_character server.
func (c *Client) GetCharacter() goa.Endpoint {
	var (
		decodeResponse = DecodeGetCharacterResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetCharacterRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetCharacterDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("externalservice", "get_character", err)
		}
		return decodeResponse(resp)
	}
}

// UpdateCharacter returns an endpoint that makes HTTP requests to the
// externalservice service update_character server.
func (c *Client) UpdateCharacter() goa.Endpoint {
	var (
		encodeRequest  = EncodeUpdateCharacterRequest(c.encoder)
		decodeResponse = DecodeUpdateCharacterResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildUpdateCharacterRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UpdateCharacterDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("externalservice", "update_character", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteCharacter returns an endpoint that makes HTTP requests to the
// externalservice service delete_character server.
func (c *Client) DeleteCharacter() goa.Endpoint {
	var (
		decodeResponse = DecodeDeleteCharacterResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildDeleteCharacterRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteCharacterDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("externalservice", "delete_character", err)
		}
		return decodeResponse(resp)
	}
}

// GetInventory returns an endpoint that makes HTTP requests to the
// externalservice service get_inventory server.
func (c *Client) GetInventory() goa.Endpoint {
	var (
		decodeResponse = DecodeGetInventoryResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildGetInventoryRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetInventoryDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("externalservice", "get_inventory", err)
		}
		return decodeResponse(resp)
	}
}

// AddItemToInventory returns an endpoint that makes HTTP requests to the
// externalservice service add_item_to_inventory server.
func (c *Client) AddItemToInventory() goa.Endpoint {
	var (
		encodeRequest  = EncodeAddItemToInventoryRequest(c.encoder)
		decodeResponse = DecodeAddItemToInventoryResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildAddItemToInventoryRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AddItemToInventoryDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("externalservice", "add_item_to_inventory", err)
		}
		return decodeResponse(resp)
	}
}

// RemoveItemFromInventory returns an endpoint that makes HTTP requests to the
// externalservice service remove_item_from_inventory server.
func (c *Client) RemoveItemFromInventory() goa.Endpoint {
	var (
		decodeResponse = DecodeRemoveItemFromInventoryResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v any) (any, error) {
		req, err := c.BuildRemoveItemFromInventoryRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RemoveItemFromInventoryDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("externalservice", "remove_item_from_inventory", err)
		}
		return decodeResponse(resp)
	}
}
