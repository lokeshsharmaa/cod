// Code generated by goa v3.11.3, DO NOT EDIT.
//
// externalservice HTTP client types
//
// Command:
// $ goa gen assignment_crossnokaye/cod/externalservice/design

package client

import (
	externalservice "assignment_crossnokaye/cod/externalservice/gen/externalservice"
)

// CreateCharacterRequestBody is the type of the "externalservice" service
// "create_character" endpoint HTTP request body.
type CreateCharacterRequestBody struct {
	// Character name
	Name string `form:"name" json:"name" xml:"name"`
	// Character description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Character health
	Health int `form:"health" json:"health" xml:"health"`
	// Character experience
	Experience int `form:"experience" json:"experience" xml:"experience"`
}

// UpdateCharacterRequestBody is the type of the "externalservice" service
// "update_character" endpoint HTTP request body.
type UpdateCharacterRequestBody struct {
	// Character name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Character description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Character health
	Health *int `form:"health,omitempty" json:"health,omitempty" xml:"health,omitempty"`
	// Character experience
	Experience *int `form:"experience,omitempty" json:"experience,omitempty" xml:"experience,omitempty"`
}

// CreateCharacterResponseBody is the type of the "externalservice" service
// "create_character" endpoint HTTP response body.
type CreateCharacterResponseBody struct {
	// Character ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Character name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Character description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Character health
	Health *int `form:"health,omitempty" json:"health,omitempty" xml:"health,omitempty"`
	// Character experience
	Experience *int `form:"experience,omitempty" json:"experience,omitempty" xml:"experience,omitempty"`
}

// GetCharacterResponseBody is the type of the "externalservice" service
// "get_character" endpoint HTTP response body.
type GetCharacterResponseBody struct {
	// Character ID
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Character name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Character description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Character health
	Health *int `form:"health,omitempty" json:"health,omitempty" xml:"health,omitempty"`
	// Character experience
	Experience *int `form:"experience,omitempty" json:"experience,omitempty" xml:"experience,omitempty"`
}

// NewCreateCharacterRequestBody builds the HTTP request body from the payload
// of the "create_character" endpoint of the "externalservice" service.
func NewCreateCharacterRequestBody(p *externalservice.CreateCharacterPayload) *CreateCharacterRequestBody {
	body := &CreateCharacterRequestBody{
		Name:        p.Name,
		Description: p.Description,
		Health:      p.Health,
		Experience:  p.Experience,
	}
	return body
}

// NewUpdateCharacterRequestBody builds the HTTP request body from the payload
// of the "update_character" endpoint of the "externalservice" service.
func NewUpdateCharacterRequestBody(p *externalservice.UpdateCharacterPayload) *UpdateCharacterRequestBody {
	body := &UpdateCharacterRequestBody{
		Name:        p.Name,
		Description: p.Description,
		Health:      p.Health,
		Experience:  p.Experience,
	}
	return body
}

// NewCreateCharacterCharacterCreated builds a "externalservice" service
// "create_character" endpoint result from a HTTP "Created" response.
func NewCreateCharacterCharacterCreated(body *CreateCharacterResponseBody) *externalservice.Character {
	v := &externalservice.Character{
		ID:          body.ID,
		Name:        body.Name,
		Description: body.Description,
		Health:      body.Health,
		Experience:  body.Experience,
	}

	return v
}

// NewGetCharacterCharacterOK builds a "externalservice" service
// "get_character" endpoint result from a HTTP "OK" response.
func NewGetCharacterCharacterOK(body *GetCharacterResponseBody) *externalservice.Character {
	v := &externalservice.Character{
		ID:          body.ID,
		Name:        body.Name,
		Description: body.Description,
		Health:      body.Health,
		Experience:  body.Experience,
	}

	return v
}
