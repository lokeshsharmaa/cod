// Code generated by goa v3.11.3, DO NOT EDIT.
//
// externalservice HTTP client CLI support package
//
// Command:
// $ goa gen assignment_crossnokaye/cod/externalservice/design

package client

import (
	externalservice "assignment_crossnokaye/cod/externalservice/gen/externalservice"
	"encoding/json"
	"fmt"
	"strconv"
)

// BuildCreateCharacterPayload builds the payload for the externalservice
// create_character endpoint from CLI flags.
func BuildCreateCharacterPayload(externalserviceCreateCharacterBody string) (*externalservice.CreateCharacterPayload, error) {
	var err error
	var body CreateCharacterRequestBody
	{
		err = json.Unmarshal([]byte(externalserviceCreateCharacterBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"Ut quia accusantium at amet ut.\",\n      \"experience\": 3689643759782600333,\n      \"health\": 2497093007532229202,\n      \"name\": \"Qui aperiam pariatur voluptatem ut mollitia est.\"\n   }'")
		}
	}
	v := &externalservice.CreateCharacterPayload{
		Name:        body.Name,
		Description: body.Description,
		Health:      body.Health,
		Experience:  body.Experience,
	}

	return v, nil
}

// BuildGetCharacterPayload builds the payload for the externalservice
// get_character endpoint from CLI flags.
func BuildGetCharacterPayload(externalserviceGetCharacterID string) (*externalservice.GetCharacterPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(externalserviceGetCharacterID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &externalservice.GetCharacterPayload{}
	v.ID = id

	return v, nil
}

// BuildUpdateCharacterPayload builds the payload for the externalservice
// update_character endpoint from CLI flags.
func BuildUpdateCharacterPayload(externalserviceUpdateCharacterBody string, externalserviceUpdateCharacterID string) (*externalservice.UpdateCharacterPayload, error) {
	var err error
	var body UpdateCharacterRequestBody
	{
		err = json.Unmarshal([]byte(externalserviceUpdateCharacterBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"Facilis eligendi soluta similique illum reiciendis.\",\n      \"experience\": 4429716038026485218,\n      \"health\": 7231771245341319977,\n      \"name\": \"Eveniet rerum voluptatem.\"\n   }'")
		}
	}
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(externalserviceUpdateCharacterID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &externalservice.UpdateCharacterPayload{
		Name:        body.Name,
		Description: body.Description,
		Health:      body.Health,
		Experience:  body.Experience,
	}
	v.ID = id

	return v, nil
}

// BuildDeleteCharacterPayload builds the payload for the externalservice
// delete_character endpoint from CLI flags.
func BuildDeleteCharacterPayload(externalserviceDeleteCharacterID string) (*externalservice.DeleteCharacterPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(externalserviceDeleteCharacterID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &externalservice.DeleteCharacterPayload{}
	v.ID = id

	return v, nil
}

// BuildGetInventoryPayload builds the payload for the externalservice
// get_inventory endpoint from CLI flags.
func BuildGetInventoryPayload(externalserviceGetInventoryCharacterID string) (*externalservice.GetInventoryPayload, error) {
	var err error
	var characterID int
	{
		var v int64
		v, err = strconv.ParseInt(externalserviceGetInventoryCharacterID, 10, strconv.IntSize)
		characterID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for characterID, must be INT")
		}
	}
	v := &externalservice.GetInventoryPayload{}
	v.CharacterID = characterID

	return v, nil
}

// BuildAddItemToInventoryPayload builds the payload for the externalservice
// add_item_to_inventory endpoint from CLI flags.
func BuildAddItemToInventoryPayload(externalserviceAddItemToInventoryBody string, externalserviceAddItemToInventoryCharacterID string) (*externalservice.AddItemToInventoryPayload, error) {
	var err error
	var body AddItemToInventoryRequestBody
	{
		err = json.Unmarshal([]byte(externalserviceAddItemToInventoryBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"item_id\": 568441057683699993\n   }'")
		}
	}
	var characterID int
	{
		var v int64
		v, err = strconv.ParseInt(externalserviceAddItemToInventoryCharacterID, 10, strconv.IntSize)
		characterID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for characterID, must be INT")
		}
	}
	v := &externalservice.AddItemToInventoryPayload{
		ItemID: body.ItemID,
	}
	v.CharacterID = characterID

	return v, nil
}

// BuildRemoveItemFromInventoryPayload builds the payload for the
// externalservice remove_item_from_inventory endpoint from CLI flags.
func BuildRemoveItemFromInventoryPayload(externalserviceRemoveItemFromInventoryCharacterID string, externalserviceRemoveItemFromInventoryItemID string) (*externalservice.RemoveItemFromInventoryPayload, error) {
	var err error
	var characterID int
	{
		var v int64
		v, err = strconv.ParseInt(externalserviceRemoveItemFromInventoryCharacterID, 10, strconv.IntSize)
		characterID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for characterID, must be INT")
		}
	}
	var itemID int
	{
		var v int64
		v, err = strconv.ParseInt(externalserviceRemoveItemFromInventoryItemID, 10, strconv.IntSize)
		itemID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for itemID, must be INT")
		}
	}
	v := &externalservice.RemoveItemFromInventoryPayload{}
	v.CharacterID = characterID
	v.ItemID = itemID

	return v, nil
}

// BuildCreateItemPayload builds the payload for the externalservice
// create_item endpoint from CLI flags.
func BuildCreateItemPayload(externalserviceCreateItemBody string) (*externalservice.CreateItemPayload, error) {
	var err error
	var body CreateItemRequestBody
	{
		err = json.Unmarshal([]byte(externalserviceCreateItemBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"damage\": 8526212768874492114,\n      \"description\": \"Consequuntur sit.\",\n      \"healing\": 8265794075702108861,\n      \"name\": \"Libero maxime voluptatem aut.\",\n      \"protection\": 4780250306447570797\n   }'")
		}
	}
	v := &externalservice.CreateItemPayload{
		Name:        body.Name,
		Description: body.Description,
		Damage:      body.Damage,
		Healing:     body.Healing,
		Protection:  body.Protection,
	}

	return v, nil
}

// BuildGetItemPayload builds the payload for the externalservice get_item
// endpoint from CLI flags.
func BuildGetItemPayload(externalserviceGetItemID string) (*externalservice.GetItemPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(externalserviceGetItemID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &externalservice.GetItemPayload{}
	v.ID = id

	return v, nil
}

// BuildUpdateItemPayload builds the payload for the externalservice
// update_item endpoint from CLI flags.
func BuildUpdateItemPayload(externalserviceUpdateItemBody string, externalserviceUpdateItemID string) (*externalservice.UpdateItemPayload, error) {
	var err error
	var body UpdateItemRequestBody
	{
		err = json.Unmarshal([]byte(externalserviceUpdateItemBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"In iure magnam.\",\n      \"experience\": 3240580154618403769,\n      \"health\": 4215801335920168977,\n      \"name\": \"Omnis quia consequatur.\"\n   }'")
		}
	}
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(externalserviceUpdateItemID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &externalservice.UpdateItemPayload{
		Name:        body.Name,
		Description: body.Description,
		Health:      body.Health,
		Experience:  body.Experience,
	}
	v.ID = id

	return v, nil
}

// BuildDeleteItemPayload builds the payload for the externalservice
// delete_item endpoint from CLI flags.
func BuildDeleteItemPayload(externalserviceDeleteItemID string) (*externalservice.DeleteItemPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(externalserviceDeleteItemID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &externalservice.DeleteItemPayload{}
	v.ID = id

	return v, nil
}
