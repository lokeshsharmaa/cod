// Code generated by goa v3.11.3, DO NOT EDIT.
//
// externalservice HTTP client CLI support package
//
// Command:
// $ goa gen assignment_crossnokaye/cod/externalservice/design

package client

import (
	externalservice "assignment_crossnokaye/cod/externalservice/gen/externalservice"
	"encoding/json"
	"fmt"
	"strconv"
)

// BuildCreateCharacterPayload builds the payload for the externalservice
// create_character endpoint from CLI flags.
func BuildCreateCharacterPayload(externalserviceCreateCharacterBody string) (*externalservice.CreateCharacterPayload, error) {
	var err error
	var body CreateCharacterRequestBody
	{
		err = json.Unmarshal([]byte(externalserviceCreateCharacterBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"Quia officiis sunt qui quia.\",\n      \"experience\": 8516222454781191823,\n      \"health\": 4571870516214136443,\n      \"name\": \"Vero omnis illum ratione pariatur laboriosam quia.\"\n   }'")
		}
	}
	v := &externalservice.CreateCharacterPayload{
		Name:        body.Name,
		Description: body.Description,
		Health:      body.Health,
		Experience:  body.Experience,
	}

	return v, nil
}

// BuildGetCharacterPayload builds the payload for the externalservice
// get_character endpoint from CLI flags.
func BuildGetCharacterPayload(externalserviceGetCharacterID string) (*externalservice.GetCharacterPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(externalserviceGetCharacterID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &externalservice.GetCharacterPayload{}
	v.ID = id

	return v, nil
}

// BuildUpdateCharacterPayload builds the payload for the externalservice
// update_character endpoint from CLI flags.
func BuildUpdateCharacterPayload(externalserviceUpdateCharacterBody string, externalserviceUpdateCharacterID string) (*externalservice.UpdateCharacterPayload, error) {
	var err error
	var body UpdateCharacterRequestBody
	{
		err = json.Unmarshal([]byte(externalserviceUpdateCharacterBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"Ut mollitia est.\",\n      \"experience\": 5568484907136742814,\n      \"health\": 2968286776226512618,\n      \"name\": \"Dolore voluptas distinctio qui aperiam pariatur.\"\n   }'")
		}
	}
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(externalserviceUpdateCharacterID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &externalservice.UpdateCharacterPayload{
		Name:        body.Name,
		Description: body.Description,
		Health:      body.Health,
		Experience:  body.Experience,
	}
	v.ID = id

	return v, nil
}

// BuildDeleteCharacterPayload builds the payload for the externalservice
// delete_character endpoint from CLI flags.
func BuildDeleteCharacterPayload(externalserviceDeleteCharacterID string) (*externalservice.DeleteCharacterPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(externalserviceDeleteCharacterID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &externalservice.DeleteCharacterPayload{}
	v.ID = id

	return v, nil
}

// BuildGetInventoryPayload builds the payload for the externalservice
// get_inventory endpoint from CLI flags.
func BuildGetInventoryPayload(externalserviceGetInventoryCharacterID string) (*externalservice.GetInventoryPayload, error) {
	var err error
	var characterID int
	{
		var v int64
		v, err = strconv.ParseInt(externalserviceGetInventoryCharacterID, 10, strconv.IntSize)
		characterID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for characterID, must be INT")
		}
	}
	v := &externalservice.GetInventoryPayload{}
	v.CharacterID = characterID

	return v, nil
}

// BuildAddItemToInventoryPayload builds the payload for the externalservice
// add_item_to_inventory endpoint from CLI flags.
func BuildAddItemToInventoryPayload(externalserviceAddItemToInventoryBody string, externalserviceAddItemToInventoryCharacterID string) (*externalservice.AddItemToInventoryPayload, error) {
	var err error
	var body AddItemToInventoryRequestBody
	{
		err = json.Unmarshal([]byte(externalserviceAddItemToInventoryBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"item_id\": 8734216661098503449\n   }'")
		}
	}
	var characterID int
	{
		var v int64
		v, err = strconv.ParseInt(externalserviceAddItemToInventoryCharacterID, 10, strconv.IntSize)
		characterID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for characterID, must be INT")
		}
	}
	v := &externalservice.AddItemToInventoryPayload{
		ItemID: body.ItemID,
	}
	v.CharacterID = characterID

	return v, nil
}

// BuildRemoveItemFromInventoryPayload builds the payload for the
// externalservice remove_item_from_inventory endpoint from CLI flags.
func BuildRemoveItemFromInventoryPayload(externalserviceRemoveItemFromInventoryCharacterID string, externalserviceRemoveItemFromInventoryItemID string) (*externalservice.RemoveItemFromInventoryPayload, error) {
	var err error
	var characterID int
	{
		var v int64
		v, err = strconv.ParseInt(externalserviceRemoveItemFromInventoryCharacterID, 10, strconv.IntSize)
		characterID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for characterID, must be INT")
		}
	}
	var itemID int
	{
		var v int64
		v, err = strconv.ParseInt(externalserviceRemoveItemFromInventoryItemID, 10, strconv.IntSize)
		itemID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for itemID, must be INT")
		}
	}
	v := &externalservice.RemoveItemFromInventoryPayload{}
	v.CharacterID = characterID
	v.ItemID = itemID

	return v, nil
}
