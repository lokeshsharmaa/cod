// Code generated by goa v3.11.3, DO NOT EDIT.
//
// externalservice HTTP client CLI support package
//
// Command:
// $ goa gen assignment_crossnokaye/cod/externalservice/design

package client

import (
	externalservice "assignment_crossnokaye/cod/externalservice/gen/externalservice"
	"encoding/json"
	"fmt"
	"strconv"
)

// BuildCreateCharacterPayload builds the payload for the externalservice
// create_character endpoint from CLI flags.
func BuildCreateCharacterPayload(externalserviceCreateCharacterBody string) (*externalservice.CreateCharacterPayload, error) {
	var err error
	var body CreateCharacterRequestBody
	{
		err = json.Unmarshal([]byte(externalserviceCreateCharacterBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"Ad excepturi officia necessitatibus autem vero.\",\n      \"experience\": 6304895944173359943,\n      \"health\": 7361944416981608895,\n      \"name\": \"Ipsa eum necessitatibus ratione commodi.\"\n   }'")
		}
	}
	v := &externalservice.CreateCharacterPayload{
		Name:        body.Name,
		Description: body.Description,
		Health:      body.Health,
		Experience:  body.Experience,
	}

	return v, nil
}

// BuildGetCharacterPayload builds the payload for the externalservice
// get_character endpoint from CLI flags.
func BuildGetCharacterPayload(externalserviceGetCharacterID string) (*externalservice.GetCharacterPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(externalserviceGetCharacterID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &externalservice.GetCharacterPayload{}
	v.ID = id

	return v, nil
}

// BuildUpdateCharacterPayload builds the payload for the externalservice
// update_character endpoint from CLI flags.
func BuildUpdateCharacterPayload(externalserviceUpdateCharacterBody string, externalserviceUpdateCharacterID string) (*externalservice.UpdateCharacterPayload, error) {
	var err error
	var body UpdateCharacterRequestBody
	{
		err = json.Unmarshal([]byte(externalserviceUpdateCharacterBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"Quia quae distinctio ut.\",\n      \"experience\": 8109871214411202544,\n      \"health\": 5826639684918267823,\n      \"name\": \"Eius dolor at molestiae iste qui.\"\n   }'")
		}
	}
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(externalserviceUpdateCharacterID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &externalservice.UpdateCharacterPayload{
		Name:        body.Name,
		Description: body.Description,
		Health:      body.Health,
		Experience:  body.Experience,
	}
	v.ID = id

	return v, nil
}

// BuildDeleteCharacterPayload builds the payload for the externalservice
// delete_character endpoint from CLI flags.
func BuildDeleteCharacterPayload(externalserviceDeleteCharacterID string) (*externalservice.DeleteCharacterPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(externalserviceDeleteCharacterID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &externalservice.DeleteCharacterPayload{}
	v.ID = id

	return v, nil
}
