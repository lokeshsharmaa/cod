// Code generated by goa v3.11.3, DO NOT EDIT.
//
// externalservice HTTP client encoders and decoders
//
// Command:
// $ goa gen assignment_crossnokaye/cod/externalservice/design

package client

import (
	externalservice "assignment_crossnokaye/cod/externalservice/gen/externalservice"
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildCreateCharacterRequest instantiates a HTTP request object with method
// and path set to call the "externalservice" service "create_character"
// endpoint
func (c *Client) BuildCreateCharacterRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateCharacterExternalservicePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("externalservice", "create_character", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateCharacterRequest returns an encoder for requests sent to the
// externalservice create_character server.
func EncodeCreateCharacterRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*externalservice.CreateCharacterPayload)
		if !ok {
			return goahttp.ErrInvalidType("externalservice", "create_character", "*externalservice.CreateCharacterPayload", v)
		}
		body := NewCreateCharacterRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("externalservice", "create_character", err)
		}
		return nil
	}
}

// DecodeCreateCharacterResponse returns a decoder for responses returned by
// the externalservice create_character endpoint. restoreBody controls whether
// the response body should be restored after having been read.
func DecodeCreateCharacterResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateCharacterResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("externalservice", "create_character", err)
			}
			res := NewCreateCharacterCharacterCreated(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("externalservice", "create_character", resp.StatusCode, string(body))
		}
	}
}

// BuildGetCharacterRequest instantiates a HTTP request object with method and
// path set to call the "externalservice" service "get_character" endpoint
func (c *Client) BuildGetCharacterRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*externalservice.GetCharacterPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("externalservice", "get_character", "*externalservice.GetCharacterPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetCharacterExternalservicePath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("externalservice", "get_character", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetCharacterResponse returns a decoder for responses returned by the
// externalservice get_character endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeGetCharacterResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetCharacterResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("externalservice", "get_character", err)
			}
			res := NewGetCharacterCharacterOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("externalservice", "get_character", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateCharacterRequest instantiates a HTTP request object with method
// and path set to call the "externalservice" service "update_character"
// endpoint
func (c *Client) BuildUpdateCharacterRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*externalservice.UpdateCharacterPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("externalservice", "update_character", "*externalservice.UpdateCharacterPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateCharacterExternalservicePath(id)}
	req, err := http.NewRequest("PUT", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("externalservice", "update_character", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateCharacterRequest returns an encoder for requests sent to the
// externalservice update_character server.
func EncodeUpdateCharacterRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*externalservice.UpdateCharacterPayload)
		if !ok {
			return goahttp.ErrInvalidType("externalservice", "update_character", "*externalservice.UpdateCharacterPayload", v)
		}
		body := NewUpdateCharacterRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("externalservice", "update_character", err)
		}
		return nil
	}
}

// DecodeUpdateCharacterResponse returns a decoder for responses returned by
// the externalservice update_character endpoint. restoreBody controls whether
// the response body should be restored after having been read.
func DecodeUpdateCharacterResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("externalservice", "update_character", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteCharacterRequest instantiates a HTTP request object with method
// and path set to call the "externalservice" service "delete_character"
// endpoint
func (c *Client) BuildDeleteCharacterRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*externalservice.DeleteCharacterPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("externalservice", "delete_character", "*externalservice.DeleteCharacterPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteCharacterExternalservicePath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("externalservice", "delete_character", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeleteCharacterResponse returns a decoder for responses returned by
// the externalservice delete_character endpoint. restoreBody controls whether
// the response body should be restored after having been read.
func DecodeDeleteCharacterResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			return nil, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("externalservice", "delete_character", resp.StatusCode, string(body))
		}
	}
}
