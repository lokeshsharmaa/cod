// Code generated by goa v3.11.3, DO NOT EDIT.
//
// externalservice HTTP client CLI support package
//
// Command:
// $ goa gen assignment_crossnokaye/cod/externalservice/design

package cli

import (
	externalservicec "assignment_crossnokaye/cod/externalservice/gen/http/externalservice/client"
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `externalservice (create-character|get-character|update-character|delete-character|get-inventory|add-item-to-inventory|remove-item-from-inventory|create-item|get-item|update-item|delete-item)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` externalservice create-character --body '{
      "description": "Ut quia accusantium at amet ut.",
      "experience": 3689643759782600333,
      "health": 2497093007532229202,
      "name": "Qui aperiam pariatur voluptatem ut mollitia est."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		externalserviceFlags = flag.NewFlagSet("externalservice", flag.ContinueOnError)

		externalserviceCreateCharacterFlags    = flag.NewFlagSet("create-character", flag.ExitOnError)
		externalserviceCreateCharacterBodyFlag = externalserviceCreateCharacterFlags.String("body", "REQUIRED", "")

		externalserviceGetCharacterFlags  = flag.NewFlagSet("get-character", flag.ExitOnError)
		externalserviceGetCharacterIDFlag = externalserviceGetCharacterFlags.String("id", "REQUIRED", "Character ID")

		externalserviceUpdateCharacterFlags    = flag.NewFlagSet("update-character", flag.ExitOnError)
		externalserviceUpdateCharacterBodyFlag = externalserviceUpdateCharacterFlags.String("body", "REQUIRED", "")
		externalserviceUpdateCharacterIDFlag   = externalserviceUpdateCharacterFlags.String("id", "REQUIRED", "Character ID")

		externalserviceDeleteCharacterFlags  = flag.NewFlagSet("delete-character", flag.ExitOnError)
		externalserviceDeleteCharacterIDFlag = externalserviceDeleteCharacterFlags.String("id", "REQUIRED", "Character ID")

		externalserviceGetInventoryFlags           = flag.NewFlagSet("get-inventory", flag.ExitOnError)
		externalserviceGetInventoryCharacterIDFlag = externalserviceGetInventoryFlags.String("character-id", "REQUIRED", "Character ID")

		externalserviceAddItemToInventoryFlags           = flag.NewFlagSet("add-item-to-inventory", flag.ExitOnError)
		externalserviceAddItemToInventoryBodyFlag        = externalserviceAddItemToInventoryFlags.String("body", "REQUIRED", "")
		externalserviceAddItemToInventoryCharacterIDFlag = externalserviceAddItemToInventoryFlags.String("character-id", "REQUIRED", "Character ID")

		externalserviceRemoveItemFromInventoryFlags           = flag.NewFlagSet("remove-item-from-inventory", flag.ExitOnError)
		externalserviceRemoveItemFromInventoryCharacterIDFlag = externalserviceRemoveItemFromInventoryFlags.String("character-id", "REQUIRED", "Character ID")
		externalserviceRemoveItemFromInventoryItemIDFlag      = externalserviceRemoveItemFromInventoryFlags.String("item-id", "REQUIRED", "Item ID")

		externalserviceCreateItemFlags    = flag.NewFlagSet("create-item", flag.ExitOnError)
		externalserviceCreateItemBodyFlag = externalserviceCreateItemFlags.String("body", "REQUIRED", "")

		externalserviceGetItemFlags  = flag.NewFlagSet("get-item", flag.ExitOnError)
		externalserviceGetItemIDFlag = externalserviceGetItemFlags.String("id", "REQUIRED", "Item ID")

		externalserviceUpdateItemFlags    = flag.NewFlagSet("update-item", flag.ExitOnError)
		externalserviceUpdateItemBodyFlag = externalserviceUpdateItemFlags.String("body", "REQUIRED", "")
		externalserviceUpdateItemIDFlag   = externalserviceUpdateItemFlags.String("id", "REQUIRED", "Item ID")

		externalserviceDeleteItemFlags  = flag.NewFlagSet("delete-item", flag.ExitOnError)
		externalserviceDeleteItemIDFlag = externalserviceDeleteItemFlags.String("id", "REQUIRED", "Item ID")
	)
	externalserviceFlags.Usage = externalserviceUsage
	externalserviceCreateCharacterFlags.Usage = externalserviceCreateCharacterUsage
	externalserviceGetCharacterFlags.Usage = externalserviceGetCharacterUsage
	externalserviceUpdateCharacterFlags.Usage = externalserviceUpdateCharacterUsage
	externalserviceDeleteCharacterFlags.Usage = externalserviceDeleteCharacterUsage
	externalserviceGetInventoryFlags.Usage = externalserviceGetInventoryUsage
	externalserviceAddItemToInventoryFlags.Usage = externalserviceAddItemToInventoryUsage
	externalserviceRemoveItemFromInventoryFlags.Usage = externalserviceRemoveItemFromInventoryUsage
	externalserviceCreateItemFlags.Usage = externalserviceCreateItemUsage
	externalserviceGetItemFlags.Usage = externalserviceGetItemUsage
	externalserviceUpdateItemFlags.Usage = externalserviceUpdateItemUsage
	externalserviceDeleteItemFlags.Usage = externalserviceDeleteItemUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "externalservice":
			svcf = externalserviceFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "externalservice":
			switch epn {
			case "create-character":
				epf = externalserviceCreateCharacterFlags

			case "get-character":
				epf = externalserviceGetCharacterFlags

			case "update-character":
				epf = externalserviceUpdateCharacterFlags

			case "delete-character":
				epf = externalserviceDeleteCharacterFlags

			case "get-inventory":
				epf = externalserviceGetInventoryFlags

			case "add-item-to-inventory":
				epf = externalserviceAddItemToInventoryFlags

			case "remove-item-from-inventory":
				epf = externalserviceRemoveItemFromInventoryFlags

			case "create-item":
				epf = externalserviceCreateItemFlags

			case "get-item":
				epf = externalserviceGetItemFlags

			case "update-item":
				epf = externalserviceUpdateItemFlags

			case "delete-item":
				epf = externalserviceDeleteItemFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "externalservice":
			c := externalservicec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-character":
				endpoint = c.CreateCharacter()
				data, err = externalservicec.BuildCreateCharacterPayload(*externalserviceCreateCharacterBodyFlag)
			case "get-character":
				endpoint = c.GetCharacter()
				data, err = externalservicec.BuildGetCharacterPayload(*externalserviceGetCharacterIDFlag)
			case "update-character":
				endpoint = c.UpdateCharacter()
				data, err = externalservicec.BuildUpdateCharacterPayload(*externalserviceUpdateCharacterBodyFlag, *externalserviceUpdateCharacterIDFlag)
			case "delete-character":
				endpoint = c.DeleteCharacter()
				data, err = externalservicec.BuildDeleteCharacterPayload(*externalserviceDeleteCharacterIDFlag)
			case "get-inventory":
				endpoint = c.GetInventory()
				data, err = externalservicec.BuildGetInventoryPayload(*externalserviceGetInventoryCharacterIDFlag)
			case "add-item-to-inventory":
				endpoint = c.AddItemToInventory()
				data, err = externalservicec.BuildAddItemToInventoryPayload(*externalserviceAddItemToInventoryBodyFlag, *externalserviceAddItemToInventoryCharacterIDFlag)
			case "remove-item-from-inventory":
				endpoint = c.RemoveItemFromInventory()
				data, err = externalservicec.BuildRemoveItemFromInventoryPayload(*externalserviceRemoveItemFromInventoryCharacterIDFlag, *externalserviceRemoveItemFromInventoryItemIDFlag)
			case "create-item":
				endpoint = c.CreateItem()
				data, err = externalservicec.BuildCreateItemPayload(*externalserviceCreateItemBodyFlag)
			case "get-item":
				endpoint = c.GetItem()
				data, err = externalservicec.BuildGetItemPayload(*externalserviceGetItemIDFlag)
			case "update-item":
				endpoint = c.UpdateItem()
				data, err = externalservicec.BuildUpdateItemPayload(*externalserviceUpdateItemBodyFlag, *externalserviceUpdateItemIDFlag)
			case "delete-item":
				endpoint = c.DeleteItem()
				data, err = externalservicec.BuildDeleteItemPayload(*externalserviceDeleteItemIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// externalserviceUsage displays the usage of the externalservice command and
// its subcommands.
func externalserviceUsage() {
	fmt.Fprintf(os.Stderr, `Contains API CRUD operations on characters, inventories, and items.
Usage:
    %[1]s [globalflags] externalservice COMMAND [flags]

COMMAND:
    create-character: Creating a new Character
    get-character: Fetching a Character
    update-character: Updating a Character
    delete-character: Deleting a Character
    get-inventory: Fetching a Character's Inventory
    add-item-to-inventory: Adding an Item to Character's Inventory
    remove-item-from-inventory: Removing an Item from Character's Inventory
    create-item: Creating a new Item
    get-item: Fetching a Item
    update-item: Updating a Item
    delete-item: Deleting a Item

Additional help:
    %[1]s externalservice COMMAND --help
`, os.Args[0])
}
func externalserviceCreateCharacterUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] externalservice create-character -body JSON

Creating a new Character
    -body JSON: 

Example:
    %[1]s externalservice create-character --body '{
      "description": "Ut quia accusantium at amet ut.",
      "experience": 3689643759782600333,
      "health": 2497093007532229202,
      "name": "Qui aperiam pariatur voluptatem ut mollitia est."
   }'
`, os.Args[0])
}

func externalserviceGetCharacterUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] externalservice get-character -id INT

Fetching a Character
    -id INT: Character ID

Example:
    %[1]s externalservice get-character --id 1591572569422129497
`, os.Args[0])
}

func externalserviceUpdateCharacterUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] externalservice update-character -body JSON -id INT

Updating a Character
    -body JSON: 
    -id INT: Character ID

Example:
    %[1]s externalservice update-character --body '{
      "description": "Facilis eligendi soluta similique illum reiciendis.",
      "experience": 4429716038026485218,
      "health": 7231771245341319977,
      "name": "Eveniet rerum voluptatem."
   }' --id 2823621889944725328
`, os.Args[0])
}

func externalserviceDeleteCharacterUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] externalservice delete-character -id INT

Deleting a Character
    -id INT: Character ID

Example:
    %[1]s externalservice delete-character --id 2304153007448072890
`, os.Args[0])
}

func externalserviceGetInventoryUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] externalservice get-inventory -character-id INT

Fetching a Character's Inventory
    -character-id INT: Character ID

Example:
    %[1]s externalservice get-inventory --character-id 2154155204521645316
`, os.Args[0])
}

func externalserviceAddItemToInventoryUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] externalservice add-item-to-inventory -body JSON -character-id INT

Adding an Item to Character's Inventory
    -body JSON: 
    -character-id INT: Character ID

Example:
    %[1]s externalservice add-item-to-inventory --body '{
      "item_id": 568441057683699993
   }' --character-id 5667695314406382572
`, os.Args[0])
}

func externalserviceRemoveItemFromInventoryUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] externalservice remove-item-from-inventory -character-id INT -item-id INT

Removing an Item from Character's Inventory
    -character-id INT: Character ID
    -item-id INT: Item ID

Example:
    %[1]s externalservice remove-item-from-inventory --character-id 3326990369775092063 --item-id 5725183425841763447
`, os.Args[0])
}

func externalserviceCreateItemUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] externalservice create-item -body JSON

Creating a new Item
    -body JSON: 

Example:
    %[1]s externalservice create-item --body '{
      "damage": 8526212768874492114,
      "description": "Consequuntur sit.",
      "healing": 8265794075702108861,
      "name": "Libero maxime voluptatem aut.",
      "protection": 4780250306447570797
   }'
`, os.Args[0])
}

func externalserviceGetItemUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] externalservice get-item -id INT

Fetching a Item
    -id INT: Item ID

Example:
    %[1]s externalservice get-item --id 7732534785951416741
`, os.Args[0])
}

func externalserviceUpdateItemUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] externalservice update-item -body JSON -id INT

Updating a Item
    -body JSON: 
    -id INT: Item ID

Example:
    %[1]s externalservice update-item --body '{
      "description": "In iure magnam.",
      "experience": 3240580154618403769,
      "health": 4215801335920168977,
      "name": "Omnis quia consequatur."
   }' --id 6022789432163838060
`, os.Args[0])
}

func externalserviceDeleteItemUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] externalservice delete-item -id INT

Deleting a Item
    -id INT: Item ID

Example:
    %[1]s externalservice delete-item --id 8060972358180548241
`, os.Args[0])
}
