// Code generated by MockGen. DO NOT EDIT.
// Source: assignment_crossnokaye/cod/externalservice/clients/characterservice (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	characterservice "assignment_crossnokaye/cod/externalservice/clients/characterservice"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateCharacter mocks base method.
func (m *MockClient) CreateCharacter(arg0 context.Context, arg1 *characterservice.CreatePayload) (*int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCharacter", arg0, arg1)
	ret0, _ := ret[0].(*int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCharacter indicates an expected call of CreateCharacter.
func (mr *MockClientMockRecorder) CreateCharacter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCharacter", reflect.TypeOf((*MockClient)(nil).CreateCharacter), arg0, arg1)
}

// DeleteCharacter mocks base method.
func (m *MockClient) DeleteCharacter(arg0 context.Context, arg1 *characterservice.DeletePayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCharacter", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCharacter indicates an expected call of DeleteCharacter.
func (mr *MockClientMockRecorder) DeleteCharacter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCharacter", reflect.TypeOf((*MockClient)(nil).DeleteCharacter), arg0, arg1)
}

// GetCharacter mocks base method.
func (m *MockClient) GetCharacter(arg0 context.Context, arg1 *characterservice.GetPayload) (*characterservice.Character, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharacter", arg0, arg1)
	ret0, _ := ret[0].(*characterservice.Character)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharacter indicates an expected call of GetCharacter.
func (mr *MockClientMockRecorder) GetCharacter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharacter", reflect.TypeOf((*MockClient)(nil).GetCharacter), arg0, arg1)
}

// UpdateCharacter mocks base method.
func (m *MockClient) UpdateCharacter(arg0 context.Context, arg1 *characterservice.UpdatePayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCharacter", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCharacter indicates an expected call of UpdateCharacter.
func (mr *MockClientMockRecorder) UpdateCharacter(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCharacter", reflect.TypeOf((*MockClient)(nil).UpdateCharacter), arg0, arg1)
}
