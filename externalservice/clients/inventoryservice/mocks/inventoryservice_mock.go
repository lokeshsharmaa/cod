// Code generated by MockGen. DO NOT EDIT.
// Source: assignment_crossnokaye/cod/externalservice/clients/inventoryservice (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	inventoryservice "assignment_crossnokaye/cod/externalservice/clients/inventoryservice"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddInventory mocks base method.
func (m *MockClient) AddInventory(arg0 context.Context, arg1 *inventoryservice.AddPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddInventory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddInventory indicates an expected call of AddInventory.
func (mr *MockClientMockRecorder) AddInventory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInventory", reflect.TypeOf((*MockClient)(nil).AddInventory), arg0, arg1)
}

// DeleteInventory mocks base method.
func (m *MockClient) DeleteInventory(arg0 context.Context, arg1 *inventoryservice.DeletePayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInventory", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInventory indicates an expected call of DeleteInventory.
func (mr *MockClientMockRecorder) DeleteInventory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInventory", reflect.TypeOf((*MockClient)(nil).DeleteInventory), arg0, arg1)
}

// GetInventory mocks base method.
func (m *MockClient) GetInventory(arg0 context.Context, arg1 *inventoryservice.GetPayload) (*inventoryservice.Inventory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInventory", arg0, arg1)
	ret0, _ := ret[0].(*inventoryservice.Inventory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInventory indicates an expected call of GetInventory.
func (mr *MockClientMockRecorder) GetInventory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventory", reflect.TypeOf((*MockClient)(nil).GetInventory), arg0, arg1)
}
