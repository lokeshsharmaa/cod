// Code generated by goa v3.11.3, DO NOT EDIT.
//
// characterservice gRPC server
//
// Command:
// $ goa gen assignment_crossnokaye/cod/characterservice/design

package server

import (
	characterservice "assignment_crossnokaye/cod/characterservice/gen/characterservice"
	characterservicepb "assignment_crossnokaye/cod/characterservice/gen/grpc/characterservice/pb"
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
)

// Server implements the characterservicepb.CharacterserviceServer interface.
type Server struct {
	CreateH goagrpc.UnaryHandler
	GetH    goagrpc.UnaryHandler
	UpdateH goagrpc.UnaryHandler
	DeleteH goagrpc.UnaryHandler
	characterservicepb.UnimplementedCharacterserviceServer
}

// New instantiates the server struct with the characterservice service
// endpoints.
func New(e *characterservice.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		CreateH: NewCreateHandler(e.Create, uh),
		GetH:    NewGetHandler(e.Get, uh),
		UpdateH: NewUpdateHandler(e.Update, uh),
		DeleteH: NewDeleteHandler(e.Delete, uh),
	}
}

// NewCreateHandler creates a gRPC handler which serves the "characterservice"
// service "Create" endpoint.
func NewCreateHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeCreateRequest, EncodeCreateResponse)
	}
	return h
}

// Create implements the "Create" method in
// characterservicepb.CharacterserviceServer interface.
func (s *Server) Create(ctx context.Context, message *characterservicepb.CreateRequest) (*characterservicepb.CreateResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "Create")
	ctx = context.WithValue(ctx, goa.ServiceKey, "characterservice")
	resp, err := s.CreateH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*characterservicepb.CreateResponse), nil
}

// NewGetHandler creates a gRPC handler which serves the "characterservice"
// service "Get" endpoint.
func NewGetHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeGetRequest, EncodeGetResponse)
	}
	return h
}

// Get implements the "Get" method in characterservicepb.CharacterserviceServer
// interface.
func (s *Server) Get(ctx context.Context, message *characterservicepb.GetRequest) (*characterservicepb.GetResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "Get")
	ctx = context.WithValue(ctx, goa.ServiceKey, "characterservice")
	resp, err := s.GetH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*characterservicepb.GetResponse), nil
}

// NewUpdateHandler creates a gRPC handler which serves the "characterservice"
// service "Update" endpoint.
func NewUpdateHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeUpdateRequest, EncodeUpdateResponse)
	}
	return h
}

// Update implements the "Update" method in
// characterservicepb.CharacterserviceServer interface.
func (s *Server) Update(ctx context.Context, message *characterservicepb.UpdateRequest) (*characterservicepb.UpdateResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "Update")
	ctx = context.WithValue(ctx, goa.ServiceKey, "characterservice")
	resp, err := s.UpdateH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*characterservicepb.UpdateResponse), nil
}

// NewDeleteHandler creates a gRPC handler which serves the "characterservice"
// service "Delete" endpoint.
func NewDeleteHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeDeleteRequest, EncodeDeleteResponse)
	}
	return h
}

// Delete implements the "Delete" method in
// characterservicepb.CharacterserviceServer interface.
func (s *Server) Delete(ctx context.Context, message *characterservicepb.DeleteRequest) (*characterservicepb.DeleteResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "Delete")
	ctx = context.WithValue(ctx, goa.ServiceKey, "characterservice")
	resp, err := s.DeleteH.Handle(ctx, message)
	if err != nil {
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*characterservicepb.DeleteResponse), nil
}
