// Code generated by goa v3.11.3, DO NOT EDIT.
//
// characterservice gRPC server types
//
// Command:
// $ goa gen assignment_crossnokaye/cod/characterservice/design

package server

import (
	characterservice "assignment_crossnokaye/cod/characterservice/gen/characterservice"
	characterservicepb "assignment_crossnokaye/cod/characterservice/gen/grpc/characterservice/pb"
)

// NewCreatePayload builds the payload of the "Create" endpoint of the
// "characterservice" service from the gRPC request type.
func NewCreatePayload(message *characterservicepb.CreateRequest) *characterservice.CreatePayload {
	v := &characterservice.CreatePayload{
		Name:        message.Name,
		Description: message.Description,
		Health:      int(message.Health),
		Experience:  int(message.Experience),
	}
	return v
}

// NewProtoCreateResponse builds the gRPC response type from the result of the
// "Create" endpoint of the "characterservice" service.
func NewProtoCreateResponse(result int) *characterservicepb.CreateResponse {
	message := &characterservicepb.CreateResponse{}
	message.Field = int32(result)
	return message
}

// NewGetPayload builds the payload of the "Get" endpoint of the
// "characterservice" service from the gRPC request type.
func NewGetPayload(message *characterservicepb.GetRequest) *characterservice.GetPayload {
	v := &characterservice.GetPayload{
		ID: int(message.Id),
	}
	return v
}

// NewProtoGetResponse builds the gRPC response type from the result of the
// "Get" endpoint of the "characterservice" service.
func NewProtoGetResponse(result *characterservice.Character) *characterservicepb.GetResponse {
	message := &characterservicepb.GetResponse{
		Name:        result.Name,
		Description: result.Description,
	}
	if result.ID != nil {
		id := int32(*result.ID)
		message.Id = &id
	}
	if result.Health != nil {
		health := int32(*result.Health)
		message.Health = &health
	}
	if result.Experience != nil {
		experience := int32(*result.Experience)
		message.Experience = &experience
	}
	return message
}

// NewUpdatePayload builds the payload of the "Update" endpoint of the
// "characterservice" service from the gRPC request type.
func NewUpdatePayload(message *characterservicepb.UpdateRequest) *characterservice.UpdatePayload {
	v := &characterservice.UpdatePayload{
		ID:          int(message.Id),
		Name:        message.Name,
		Description: message.Description,
	}
	if message.Health != nil {
		health := int(*message.Health)
		v.Health = &health
	}
	if message.Experience != nil {
		experience := int(*message.Experience)
		v.Experience = &experience
	}
	return v
}

// NewProtoUpdateResponse builds the gRPC response type from the result of the
// "Update" endpoint of the "characterservice" service.
func NewProtoUpdateResponse() *characterservicepb.UpdateResponse {
	message := &characterservicepb.UpdateResponse{}
	return message
}

// NewDeletePayload builds the payload of the "Delete" endpoint of the
// "characterservice" service from the gRPC request type.
func NewDeletePayload(message *characterservicepb.DeleteRequest) *characterservice.DeletePayload {
	v := &characterservice.DeletePayload{
		ID: int(message.Id),
	}
	return v
}

// NewProtoDeleteResponse builds the gRPC response type from the result of the
// "Delete" endpoint of the "characterservice" service.
func NewProtoDeleteResponse() *characterservicepb.DeleteResponse {
	message := &characterservicepb.DeleteResponse{}
	return message
}
