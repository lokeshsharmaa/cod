// Code generated by goa v3.11.3, DO NOT EDIT.
//
// characterservice gRPC client types
//
// Command:
// $ goa gen assignment_crossnokaye/cod/characterservice/design

package client

import (
	characterservice "assignment_crossnokaye/cod/characterservice/gen/characterservice"
	characterservicepb "assignment_crossnokaye/cod/characterservice/gen/grpc/characterservice/pb"
)

// NewProtoCreateRequest builds the gRPC request type from the payload of the
// "Create" endpoint of the "characterservice" service.
func NewProtoCreateRequest(payload *characterservice.CreatePayload) *characterservicepb.CreateRequest {
	message := &characterservicepb.CreateRequest{
		Name:        payload.Name,
		Description: payload.Description,
		Health:      int32(payload.Health),
		Experience:  int32(payload.Experience),
	}
	return message
}

// NewCreateResult builds the result type of the "Create" endpoint of the
// "characterservice" service from the gRPC response type.
func NewCreateResult(message *characterservicepb.CreateResponse) int {
	result := int(message.Field)
	return result
}

// NewProtoGetRequest builds the gRPC request type from the payload of the
// "Get" endpoint of the "characterservice" service.
func NewProtoGetRequest(payload *characterservice.GetPayload) *characterservicepb.GetRequest {
	message := &characterservicepb.GetRequest{
		Id: int32(payload.ID),
	}
	return message
}

// NewGetResult builds the result type of the "Get" endpoint of the
// "characterservice" service from the gRPC response type.
func NewGetResult(message *characterservicepb.GetResponse) *characterservice.Character {
	result := &characterservice.Character{
		Name:        message.Name,
		Description: message.Description,
	}
	if message.Id != nil {
		id := int(*message.Id)
		result.ID = &id
	}
	if message.Health != nil {
		health := int(*message.Health)
		result.Health = &health
	}
	if message.Experience != nil {
		experience := int(*message.Experience)
		result.Experience = &experience
	}
	return result
}

// NewProtoUpdateRequest builds the gRPC request type from the payload of the
// "Update" endpoint of the "characterservice" service.
func NewProtoUpdateRequest(payload *characterservice.UpdatePayload) *characterservicepb.UpdateRequest {
	message := &characterservicepb.UpdateRequest{
		Id:          int32(payload.ID),
		Name:        payload.Name,
		Description: payload.Description,
	}
	if payload.Health != nil {
		health := int32(*payload.Health)
		message.Health = &health
	}
	if payload.Experience != nil {
		experience := int32(*payload.Experience)
		message.Experience = &experience
	}
	return message
}

// NewProtoDeleteRequest builds the gRPC request type from the payload of the
// "Delete" endpoint of the "characterservice" service.
func NewProtoDeleteRequest(payload *characterservice.DeletePayload) *characterservicepb.DeleteRequest {
	message := &characterservicepb.DeleteRequest{
		Id: int32(payload.ID),
	}
	return message
}
