// Code generated by goa v3.11.3, DO NOT EDIT.
//
// characterservice gRPC client CLI support package
//
// Command:
// $ goa gen assignment_crossnokaye/cod/characterservice/design

package client

import (
	characterservice "assignment_crossnokaye/cod/characterservice/gen/characterservice"
	characterservicepb "assignment_crossnokaye/cod/characterservice/gen/grpc/characterservice/pb"
	"encoding/json"
	"fmt"
)

// BuildCreatePayload builds the payload for the characterservice Create
// endpoint from CLI flags.
func BuildCreatePayload(characterserviceCreateMessage string) (*characterservice.CreatePayload, error) {
	var err error
	var message characterservicepb.CreateRequest
	{
		if characterserviceCreateMessage != "" {
			err = json.Unmarshal([]byte(characterserviceCreateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"Quaerat at occaecati non quas similique.\",\n      \"experience\": 3387672779888827242,\n      \"health\": 673969418197840339,\n      \"name\": \"Nihil asperiores inventore aliquam adipisci.\"\n   }'")
			}
		}
	}
	v := &characterservice.CreatePayload{
		Name:        message.Name,
		Description: message.Description,
		Health:      int(message.Health),
		Experience:  int(message.Experience),
	}

	return v, nil
}

// BuildGetPayload builds the payload for the characterservice Get endpoint
// from CLI flags.
func BuildGetPayload(characterserviceGetMessage string) (*characterservice.GetPayload, error) {
	var err error
	var message characterservicepb.GetRequest
	{
		if characterserviceGetMessage != "" {
			err = json.Unmarshal([]byte(characterserviceGetMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": 4559389384886790601\n   }'")
			}
		}
	}
	v := &characterservice.GetPayload{
		ID: int(message.Id),
	}

	return v, nil
}

// BuildUpdatePayload builds the payload for the characterservice Update
// endpoint from CLI flags.
func BuildUpdatePayload(characterserviceUpdateMessage string) (*characterservice.UpdatePayload, error) {
	var err error
	var message characterservicepb.UpdateRequest
	{
		if characterserviceUpdateMessage != "" {
			err = json.Unmarshal([]byte(characterserviceUpdateMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"Tempore aliquid non minus autem consequuntur.\",\n      \"experience\": 4867220670005344088,\n      \"health\": 3560890602549132571,\n      \"id\": 1449266651806638448,\n      \"name\": \"Ratione quia et est magnam.\"\n   }'")
			}
		}
	}
	v := &characterservice.UpdatePayload{
		ID:          int(message.Id),
		Name:        message.Name,
		Description: message.Description,
	}
	if message.Health != nil {
		health := int(*message.Health)
		v.Health = &health
	}
	if message.Experience != nil {
		experience := int(*message.Experience)
		v.Experience = &experience
	}

	return v, nil
}

// BuildDeletePayload builds the payload for the characterservice Delete
// endpoint from CLI flags.
func BuildDeletePayload(characterserviceDeleteMessage string) (*characterservice.DeletePayload, error) {
	var err error
	var message characterservicepb.DeleteRequest
	{
		if characterserviceDeleteMessage != "" {
			err = json.Unmarshal([]byte(characterserviceDeleteMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": 8619865826567352045\n   }'")
			}
		}
	}
	v := &characterservice.DeletePayload{
		ID: int(message.Id),
	}

	return v, nil
}
