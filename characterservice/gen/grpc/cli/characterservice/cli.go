// Code generated by goa v3.11.3, DO NOT EDIT.
//
// characterservice gRPC client CLI support package
//
// Command:
// $ goa gen assignment_crossnokaye/cod/characterservice/design

package cli

import (
	characterservicec "assignment_crossnokaye/cod/characterservice/gen/grpc/characterservice/client"
	"flag"
	"fmt"
	"os"

	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `characterservice (create|get|update|delete)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` characterservice create --message '{
      "description": "Quaerat at occaecati non quas similique.",
      "experience": 3387672779888827242,
      "health": 673969418197840339,
      "name": "Nihil asperiores inventore aliquam adipisci."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, any, error) {
	var (
		characterserviceFlags = flag.NewFlagSet("characterservice", flag.ContinueOnError)

		characterserviceCreateFlags       = flag.NewFlagSet("create", flag.ExitOnError)
		characterserviceCreateMessageFlag = characterserviceCreateFlags.String("message", "", "")

		characterserviceGetFlags       = flag.NewFlagSet("get", flag.ExitOnError)
		characterserviceGetMessageFlag = characterserviceGetFlags.String("message", "", "")

		characterserviceUpdateFlags       = flag.NewFlagSet("update", flag.ExitOnError)
		characterserviceUpdateMessageFlag = characterserviceUpdateFlags.String("message", "", "")

		characterserviceDeleteFlags       = flag.NewFlagSet("delete", flag.ExitOnError)
		characterserviceDeleteMessageFlag = characterserviceDeleteFlags.String("message", "", "")
	)
	characterserviceFlags.Usage = characterserviceUsage
	characterserviceCreateFlags.Usage = characterserviceCreateUsage
	characterserviceGetFlags.Usage = characterserviceGetUsage
	characterserviceUpdateFlags.Usage = characterserviceUpdateUsage
	characterserviceDeleteFlags.Usage = characterserviceDeleteUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "characterservice":
			svcf = characterserviceFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "characterservice":
			switch epn {
			case "create":
				epf = characterserviceCreateFlags

			case "get":
				epf = characterserviceGetFlags

			case "update":
				epf = characterserviceUpdateFlags

			case "delete":
				epf = characterserviceDeleteFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "characterservice":
			c := characterservicec.NewClient(cc, opts...)
			switch epn {
			case "create":
				endpoint = c.Create()
				data, err = characterservicec.BuildCreatePayload(*characterserviceCreateMessageFlag)
			case "get":
				endpoint = c.Get()
				data, err = characterservicec.BuildGetPayload(*characterserviceGetMessageFlag)
			case "update":
				endpoint = c.Update()
				data, err = characterservicec.BuildUpdatePayload(*characterserviceUpdateMessageFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = characterservicec.BuildDeletePayload(*characterserviceDeleteMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// characterserviceUsage displays the usage of the characterservice command and
// its subcommands.
func characterserviceUsage() {
	fmt.Fprintf(os.Stderr, `Handles CRUD operations for characters.
Usage:
    %[1]s [globalflags] characterservice COMMAND [flags]

COMMAND:
    create: Create a new character.
    get: Retrieve a character by ID.
    update: Update a character.
    delete: Delete a character by ID.

Additional help:
    %[1]s characterservice COMMAND --help
`, os.Args[0])
}
func characterserviceCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] characterservice create -message JSON

Create a new character.
    -message JSON: 

Example:
    %[1]s characterservice create --message '{
      "description": "Quaerat at occaecati non quas similique.",
      "experience": 3387672779888827242,
      "health": 673969418197840339,
      "name": "Nihil asperiores inventore aliquam adipisci."
   }'
`, os.Args[0])
}

func characterserviceGetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] characterservice get -message JSON

Retrieve a character by ID.
    -message JSON: 

Example:
    %[1]s characterservice get --message '{
      "id": 4559389384886790601
   }'
`, os.Args[0])
}

func characterserviceUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] characterservice update -message JSON

Update a character.
    -message JSON: 

Example:
    %[1]s characterservice update --message '{
      "description": "Tempore aliquid non minus autem consequuntur.",
      "experience": 4867220670005344088,
      "health": 3560890602549132571,
      "id": 1449266651806638448,
      "name": "Ratione quia et est magnam."
   }'
`, os.Args[0])
}

func characterserviceDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] characterservice delete -message JSON

Delete a character by ID.
    -message JSON: 

Example:
    %[1]s characterservice delete --message '{
      "id": 8619865826567352045
   }'
`, os.Args[0])
}
