// Code generated by goa v3.11.3, DO NOT EDIT.
//
// characterservice service
//
// Command:
// $ goa gen assignment_crossnokaye/cod/characterservice/design

package characterservice

import (
	"context"
)

// Handles CRUD operations for characters.
type Service interface {
	// Create a new character.
	Create(context.Context, *CreatePayload) (res int, err error)
	// Retrieve a character by ID.
	Get(context.Context, *GetPayload) (res *Character, err error)
	// Update a character.
	Update(context.Context, *UpdatePayload) (err error)
	// Delete a character by ID.
	Delete(context.Context, *DeletePayload) (err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "characterservice"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"Create", "Get", "Update", "Delete"}

// character
type Character struct {
	// Character ID
	ID *int
	// Character name
	Name *string
	// Character description
	Description *string
	// Character health
	Health *int
	// Character experience
	Experience *int
}

// CreatePayload is the payload type of the characterservice service Create
// method.
type CreatePayload struct {
	// Character name
	Name string
	// Character description
	Description *string
	// Character health
	Health int
	// Character experience
	Experience int
}

// DeletePayload is the payload type of the characterservice service Delete
// method.
type DeletePayload struct {
	// Character ID
	ID int
}

// GetPayload is the payload type of the characterservice service Get method.
type GetPayload struct {
	// Character ID
	ID int
}

// UpdatePayload is the payload type of the characterservice service Update
// method.
type UpdatePayload struct {
	// Character ID
	ID int
	// Character name
	Name *string
	// Character description
	Description *string
	// Character health
	Health *int
	// Character experience
	Experience *int
}

// Character not found
type NotFound string

// Name not unique
type UniqueConstraint string

// Error returns an error description.
func (e NotFound) Error() string {
	return "Character not found"
}

// ErrorName returns "not_found".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e NotFound) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "not_found".
func (e NotFound) GoaErrorName() string {
	return "not_found"
}

// Error returns an error description.
func (e UniqueConstraint) Error() string {
	return "Name not unique"
}

// ErrorName returns "unique_constraint".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e UniqueConstraint) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "unique_constraint".
func (e UniqueConstraint) GoaErrorName() string {
	return "unique_constraint"
}
