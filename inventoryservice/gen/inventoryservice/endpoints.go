// Code generated by goa v3.11.3, DO NOT EDIT.
//
// inventoryservice endpoints
//
// Command:
// $ goa gen assignment_crossnokaye/cod/inventoryservice/design

package inventoryservice

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "inventoryservice" service endpoints.
type Endpoints struct {
	Get    goa.Endpoint
	Add    goa.Endpoint
	Delete goa.Endpoint
}

// NewEndpoints wraps the methods of the "inventoryservice" service with
// endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Get:    NewGetEndpoint(s),
		Add:    NewAddEndpoint(s),
		Delete: NewDeleteEndpoint(s),
	}
}

// Use applies the given middleware to all the "inventoryservice" service
// endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Get = m(e.Get)
	e.Add = m(e.Add)
	e.Delete = m(e.Delete)
}

// NewGetEndpoint returns an endpoint function that calls the method "Get" of
// service "inventoryservice".
func NewGetEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetPayload)
		return s.Get(ctx, p)
	}
}

// NewAddEndpoint returns an endpoint function that calls the method "add" of
// service "inventoryservice".
func NewAddEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*AddPayload)
		return nil, s.Add(ctx, p)
	}
}

// NewDeleteEndpoint returns an endpoint function that calls the method
// "Delete" of service "inventoryservice".
func NewDeleteEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeletePayload)
		return nil, s.Delete(ctx, p)
	}
}
