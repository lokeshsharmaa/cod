// Code generated by goa v3.11.3, DO NOT EDIT.
//
// inventoryservice gRPC client CLI support package
//
// Command:
// $ goa gen assignment_crossnokaye/cod/inventoryservice/design

package client

import (
	inventoryservicepb "assignment_crossnokaye/cod/inventoryservice/gen/grpc/inventoryservice/pb"
	inventoryservice "assignment_crossnokaye/cod/inventoryservice/gen/inventoryservice"
	"encoding/json"
	"fmt"
)

// BuildGetPayload builds the payload for the inventoryservice Get endpoint
// from CLI flags.
func BuildGetPayload(inventoryserviceGetMessage string) (*inventoryservice.GetPayload, error) {
	var err error
	var message inventoryservicepb.GetRequest
	{
		if inventoryserviceGetMessage != "" {
			err = json.Unmarshal([]byte(inventoryserviceGetMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": 5162232054983307739\n   }'")
			}
		}
	}
	v := &inventoryservice.GetPayload{
		ID: int(message.Id),
	}

	return v, nil
}

// BuildAddPayload builds the payload for the inventoryservice add endpoint
// from CLI flags.
func BuildAddPayload(inventoryserviceAddMessage string) (*inventoryservice.AddPayload, error) {
	var err error
	var message inventoryservicepb.AddRequest
	{
		if inventoryserviceAddMessage != "" {
			err = json.Unmarshal([]byte(inventoryserviceAddMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"character_id\": 813017203051316745,\n      \"item_id\": 7689467978237384840\n   }'")
			}
		}
	}
	v := &inventoryservice.AddPayload{
		CharacterID: int(message.CharacterId),
	}
	if message.ItemId != nil {
		itemID := int(*message.ItemId)
		v.ItemID = &itemID
	}

	return v, nil
}

// BuildDeletePayload builds the payload for the inventoryservice Delete
// endpoint from CLI flags.
func BuildDeletePayload(inventoryserviceDeleteMessage string) (*inventoryservice.DeletePayload, error) {
	var err error
	var message inventoryservicepb.DeleteRequest
	{
		if inventoryserviceDeleteMessage != "" {
			err = json.Unmarshal([]byte(inventoryserviceDeleteMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"character_id\": 8829504136315715408,\n      \"item_id\": 4893688600522960742\n   }'")
			}
		}
	}
	v := &inventoryservice.DeletePayload{
		CharacterID: int(message.CharacterId),
		ItemID:      int(message.ItemId),
	}

	return v, nil
}
