// Code generated by goa v3.11.3, DO NOT EDIT.
//
// inventoryservice gRPC client encoders and decoders
//
// Command:
// $ goa gen assignment_crossnokaye/cod/inventoryservice/design

package client

import (
	inventoryservicepb "assignment_crossnokaye/cod/inventoryservice/gen/grpc/inventoryservice/pb"
	inventoryservice "assignment_crossnokaye/cod/inventoryservice/gen/inventoryservice"
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildGetFunc builds the remote method to invoke for "inventoryservice"
// service "Get" endpoint.
func BuildGetFunc(grpccli inventoryservicepb.InventoryserviceClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Get(ctx, reqpb.(*inventoryservicepb.GetRequest), opts...)
		}
		return grpccli.Get(ctx, &inventoryservicepb.GetRequest{}, opts...)
	}
}

// EncodeGetRequest encodes requests sent to inventoryservice Get endpoint.
func EncodeGetRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*inventoryservice.GetPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("inventoryservice", "Get", "*inventoryservice.GetPayload", v)
	}
	return NewProtoGetRequest(payload), nil
}

// DecodeGetResponse decodes responses from the inventoryservice Get endpoint.
func DecodeGetResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*inventoryservicepb.GetResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("inventoryservice", "Get", "*inventoryservicepb.GetResponse", v)
	}
	res := NewGetResult(message)
	return res, nil
}

// BuildAddFunc builds the remote method to invoke for "inventoryservice"
// service "add" endpoint.
func BuildAddFunc(grpccli inventoryservicepb.InventoryserviceClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Add(ctx, reqpb.(*inventoryservicepb.AddRequest), opts...)
		}
		return grpccli.Add(ctx, &inventoryservicepb.AddRequest{}, opts...)
	}
}

// EncodeAddRequest encodes requests sent to inventoryservice add endpoint.
func EncodeAddRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*inventoryservice.AddPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("inventoryservice", "add", "*inventoryservice.AddPayload", v)
	}
	return NewProtoAddRequest(payload), nil
}

// BuildDeleteFunc builds the remote method to invoke for "inventoryservice"
// service "Delete" endpoint.
func BuildDeleteFunc(grpccli inventoryservicepb.InventoryserviceClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.Delete(ctx, reqpb.(*inventoryservicepb.DeleteRequest), opts...)
		}
		return grpccli.Delete(ctx, &inventoryservicepb.DeleteRequest{}, opts...)
	}
}

// EncodeDeleteRequest encodes requests sent to inventoryservice Delete
// endpoint.
func EncodeDeleteRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*inventoryservice.DeletePayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("inventoryservice", "Delete", "*inventoryservice.DeletePayload", v)
	}
	return NewProtoDeleteRequest(payload), nil
}
