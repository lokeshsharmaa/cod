// Code generated by goa v3.11.3, DO NOT EDIT.
//
// inventoryservice gRPC client CLI support package
//
// Command:
// $ goa gen assignment_crossnokaye/cod/inventoryservice/design

package cli

import (
	inventoryservicec "assignment_crossnokaye/cod/inventoryservice/gen/grpc/inventoryservice/client"
	"flag"
	"fmt"
	"os"

	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `inventoryservice (get|add|delete)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` inventoryservice get --message '{
      "id": 5162232054983307739
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, any, error) {
	var (
		inventoryserviceFlags = flag.NewFlagSet("inventoryservice", flag.ContinueOnError)

		inventoryserviceGetFlags       = flag.NewFlagSet("get", flag.ExitOnError)
		inventoryserviceGetMessageFlag = inventoryserviceGetFlags.String("message", "", "")

		inventoryserviceAddFlags       = flag.NewFlagSet("add", flag.ExitOnError)
		inventoryserviceAddMessageFlag = inventoryserviceAddFlags.String("message", "", "")

		inventoryserviceDeleteFlags       = flag.NewFlagSet("delete", flag.ExitOnError)
		inventoryserviceDeleteMessageFlag = inventoryserviceDeleteFlags.String("message", "", "")
	)
	inventoryserviceFlags.Usage = inventoryserviceUsage
	inventoryserviceGetFlags.Usage = inventoryserviceGetUsage
	inventoryserviceAddFlags.Usage = inventoryserviceAddUsage
	inventoryserviceDeleteFlags.Usage = inventoryserviceDeleteUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "inventoryservice":
			svcf = inventoryserviceFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "inventoryservice":
			switch epn {
			case "get":
				epf = inventoryserviceGetFlags

			case "add":
				epf = inventoryserviceAddFlags

			case "delete":
				epf = inventoryserviceDeleteFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "inventoryservice":
			c := inventoryservicec.NewClient(cc, opts...)
			switch epn {
			case "get":
				endpoint = c.Get()
				data, err = inventoryservicec.BuildGetPayload(*inventoryserviceGetMessageFlag)
			case "add":
				endpoint = c.Add()
				data, err = inventoryservicec.BuildAddPayload(*inventoryserviceAddMessageFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = inventoryservicec.BuildDeletePayload(*inventoryserviceDeleteMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// inventoryserviceUsage displays the usage of the inventoryservice command and
// its subcommands.
func inventoryserviceUsage() {
	fmt.Fprintf(os.Stderr, `The inventoryservice service handles CRUD operations for character inventories.
Usage:
    %[1]s [globalflags] inventoryservice COMMAND [flags]

COMMAND:
    get: Retrieve an inventory.
    add: Update an inventory.
    delete: Delete an inventory by ID.

Additional help:
    %[1]s inventoryservice COMMAND --help
`, os.Args[0])
}
func inventoryserviceGetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] inventoryservice get -message JSON

Retrieve an inventory.
    -message JSON: 

Example:
    %[1]s inventoryservice get --message '{
      "id": 5162232054983307739
   }'
`, os.Args[0])
}

func inventoryserviceAddUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] inventoryservice add -message JSON

Update an inventory.
    -message JSON: 

Example:
    %[1]s inventoryservice add --message '{
      "character_id": 813017203051316745,
      "item_id": 7689467978237384840
   }'
`, os.Args[0])
}

func inventoryserviceDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] inventoryservice delete -message JSON

Delete an inventory by ID.
    -message JSON: 

Example:
    %[1]s inventoryservice delete --message '{
      "character_id": 8829504136315715408,
      "item_id": 4893688600522960742
   }'
`, os.Args[0])
}
